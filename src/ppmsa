#!/usr/bin/env python3
#
#     Copyright (C) 2022–2023, Jose Manuel Martí (LLNL)
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU Affero General Public License as
#     published by the Free Software Foundation, either version 3 of the
#     License, or (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#     GNU Affero General Public License for more details.
#
#     You should have received a copy of the GNU Affero General Public License
#     along with this program. If not, see <https://www.gnu.org/licenses/>.
#
"""
Postprocess a MSA generated by jackhmmer
"""

import argparse
from pathlib import Path
import shutil
import sys
import time
from typing import Optional

from pycameox import __version__, __author__, __date__
from pycameox.config import LICENSE, HHFILTER
from pycameox.upstream import post_msa, reformat_msa


def configure_parser():
    """Argument Parser Configuration"""
    parser = argparse.ArgumentParser(
        description="Postprocess (filter) HMMER alignments",
        epilog=f'%(prog)s - Release {__version__} - {__date__} --- ' + LICENSE,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
    parser.add_argument("-V", "--version", action="version",
            version=f"%(prog)s version {__version__} released in {__date__}"
        )
    parser.add_argument("protein", type=str, 
                        help="Name of the protein")
    parser.add_argument("work_dir", type=Path,
                        help="Path to the working directory")
    parser.add_argument("--hhfilter", type=Path,
                        default=(HHFILTER if HHFILTER.is_file() else None),
                        help="Path to the hhfilter binary")
    parser.add_argument("--fmt", choices=["stockholm", "fasta", "a3m"],
                        default="stockholm", help="Alignment format")
    parser.add_argument("--no_met_start", dest="met_start",
                        action="store_false",
                        help="Disable replacing initial gap with M(ethionine)")
    parser.add_argument("--seqid_filter", type=int, default=None,
                        help="Seq id threshold for max pairwise id [0-100]")
    parser.add_argument("--min_seq_cov", type=int, default=50,
                        help="Minimum sequence coverage")
    parser.add_argument("--min_col_cov", type=int,
                        default=50, 
                        help="Minimum column coverage")
    parser.add_argument("--num_eff_seqs", action="store_true",
                        help="Compute number of effective sequences")
    parser.add_argument("--theta", type=float, default=0.8,
                        help="Value of theta in computing sequence weights")
    return parser


def main():
    """Main entry point to script."""

    # timing initialization
    start_time: float = time.time()
    # Program header
    print(f'\n=-= {sys.argv[0]} =-= v{__version__} - {__date__}'
          f' =-= by {__author__} =-=\n')
    sys.stdout.flush()
    
    # Parse arguments
    argparser = configure_parser()
    args = argparser.parse_args()

    if args.seqid_filter is not None:
        if args.hhfilter is None:
            raise ValueError("hhfilter argument is needed but missing")
        elif not args.hhfilter.is_file():
            raise ValueError(f"hhfilter binary missing at {args.hhfilter}")
        else:
            print("INFO: EVcouplings filtering step will call hhfilter at", 
                  args.hhfilter)

    post_msa( 
        args.protein,
        args.work_dir,
        hhfilter=args.hhfilter,
        srcfmt=args.fmt,
        met_start=args.met_start,
        seqid_filter=args.seqid_filter,
        min_seq_cov=args.min_seq_cov,
        min_col_cov=args.min_col_cov,
        num_eff_seqs=args.num_eff_seqs,
        theta=args.theta
    )
    print(f'\tDone with alignment in {args.fmt} format for {args.protein}!')

    # Change evcouplings .a2m extension to .a3m
    prot_path = Path(args.work_dir, args.protein)
    a2m_file = prot_path.with_suffix('.a2m')
    a3m_file = prot_path.with_suffix('.a3m')
    shutil.move(a2m_file, a3m_file)

    # Check that the WT is the 1st seq of the alignment
    with open(a3m_file, 'r') as f:
        first_two_lines = f.readlines()[:2]
    print("INFO: 1st line of 1st seq of MSA is...\n","".join(first_two_lines))

    # Reformat alignment
    try:
       reformat_msa(args.protein, args.work_dir,
                    srcfmt='a3m', tgtfmt='fasta')
    except FileNotFoundError:
        if prot_path.with_suffix('.fasta').exists():
            print(f'WARNING! For {args.protein}, a3m file not found but fasta found!')
        else:
            print(f'ERROR! For {args.protein}, neither a3m or fasta file found!')
            raise 

    # Timing results
    print('Total elapsed time:', time.strftime(
        "%H:%M:%S", time.gmtime(time.time() - start_time))) 

if __name__ == "__main__":
    main()
